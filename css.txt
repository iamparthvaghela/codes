- css syntax
selector { property : property-value;}
	- this thing between {} is called as ruleset
	- and individual is called rule

- select multiple element for same styling using comma
	- p, li, h1 {color : green;}

	- <html_ele style = "background-color : #97DBAE;">
		- write this inside an html element		// inline css
	
	- but writing this again and again in other elements is time consuming
		- also making changes to every element is difficult
	
	- css colors
		- rgb(0-255, 0-255, 0-255)
		- rgba(0-255, 0-255, 0-255, 0-1)	// alpha is the transparency, and it color basically depends on background color
			0 - alpha means 100% transparent
		- hsl( hue, saturation , lightness)
			hue -> 0 to 360( 0 - red, 120 - green, 240 - blue)
			- saturation -> 0 - 100%(0 - shade of gray, 100 - full color)	(goes from black and white to colorful)
			- lightness -> 0 - 100% (50% is neither light or dark, 100% is white, 0% is black) (goes from black to white)
		- hwb ( hue, white, black) 
			- hue 0 to 360
			- white 0 - 100%
			- black 0 - 100%
			- used to create monochrome color pallete
			- h w b
				-0,75, 0 || 0, 50, 0 || 0, 50, 50 || 0, 0, 50 || 0, 0, 75
		- lab & lch are another color data types, but with including more colors in human vision
		-hwb, lab and lch are currently only supported in safari :(

	- rgb vs srgb
		- rgb is every possible combination of r, g, b
			- srgb is narrow range of colors(derived from rgb with very small saturation)
		- since rgb has high sat. colors, most are not visible to or perceived by human eye and the brain)
			-In srgb all color shades are visible to eye
		- srgb is a subset of rgb
		- rgb is used in professional photography
			- srgb ->laptop, computer screens, etc
	- adobe rgb has even wider gamut as compare to rgb ( gamut is basically the set of all the colors that are in the color range)
		- it is mostly used in graphic design industry
		- theoretically it has wider gamut, but in practice people didn't notice it
		- adobe rgb required special software and painstaking workflow. any mistake = dull workflow
		- also sending adobe rgb over internet, email cannot be send properly

	- html only recognizes the 16 css color keywords found in css1
		- and uses an algo to convert unknown keywords to completely diff values
		- the other color keywords should only be used in css and svg 
		- unlike html css will ignore unknown keyword
		- all the color keyword represents color with no transparency or alpha value as 1
		- although many keywords have been adapted from X11 systems
			- the colors for the keyword in your pc might not match with those in x11

	- css1 -> 16 colors -> vga colors
	- css2 -> orange keyword
	- css3 -> formally defined the x11 keywords ->x11 colors (or) svg colors
	- css4 -> rebecca purple

	- transparent rgba(0, 0, 0, 0) i.e completely representing background color 
	
	- <gradient> 		// you can also mention the direction as the first parameter
		- progressive transition between colors
		- background: linear-gradient(#f69d3c, #3f87a6);
		- background: radial-gradient(#f69d3c, #3f87a6);
		- background: repeating-linear-gradient(#f69d3c, #3f87a6 50px);
		- background: repeating-radial-gradient(#f69d3c, #3f87a6 50px);
		- background: conic-gradient(#f69d3c, #3f87a6);

	- background: currentColor --> From what I know it is taking the color of the text 


	- In css4 there is not much difference between rgb and rgba
		- they accept the same parameters and behave the same way
		- #abc -> #aabbcc
		- #abcd -> #aabbccdd	--> d is the alpha value(it will also be in hexadecimal(0 means 00, 255 means 100%)
		- r g b -> can be nums(0-255) or percentage (0-100%)
		- alpha can be num(0 - 1) or percentage (0 - 100%) -->100% means full opacity
		- rgb() can also take numbers separated by comma
		- If you are providing values in percentage, then use percentage only for other factors and don't mix numbers with %
			- but with alpha if other values are in decimal, then alpha can be in % or number

	- hsl and hsla are typically same
		- h -> 0 to 360 degrees
		- s -> 0 to 100%	-> gray to colorful
		- l -> 0 to 100%	-> 0% is black, 100% is white, 50% is normal
		- a -> 0 to 1

		
	- some tips 
		- use web aim's contrast color checker to see if contrast of your web page is well enough or not
		- for people who can't see the color well, use asterisk to highlight rather than just depending on contrast of colors
		- also a good contrast helps people looking at screen in heavy lighthing condition(sunlight)

	- /* Functional syntax with alpha value */
		rgb(255, 0, 153, 1)
		rgb(255, 0, 153, 100%)
	- /* Whitespace syntax */
		rgb(255 0 153 / 1)
		rgb(255 0 153 / 100%)

	- root element in xml documents
		- it is elements that encloses all other elements
		- in HTML it is the <html> element

	- 1 rem = 16 px (for most browsers)
		- 1 rem equals the font size of html element 

	- css units
		- px vs %
			- px is the number of pixels, and is absolute unit, doesn't change depending on the parent's size
			- % changes with parent element's dimenstion (height or width)
		- % vs vh vs vw
			- so % as we know depends on the parent's dimensions
			- vw  & vh doesn't change at all even when written inside parent
				- that's because 1 vh is 1% of screen's height and therefore not dependent on parent but viewport (or) screen's size
				
		- em vs rem
			- the size of element using rem depends on the size of the root element (typically 16 px for most browsers)
				 - 1 rem => 16 px	|| 2rem => 32 px || and so on...
				- when used inside parent, the font-size doesn't change as it always depends on root elements font size and not on parent's
				- size of rem always remains constant unlike em
			- the size of element using em depends on the font size of the parent
				- generally use to scale things up with increase in font size ( used for making responsive websites)
				- but be careful because nested em's can cause the size to grow much faster
				- 2 em means twice the size of the parent
		
	- border
		- border-width (border-(top||right||bottom||left)-width)
			- thin, medium, thick			// basically the values are not actually defined about how many pixels
			- 4px, 1.2rem, 1.5em, etc
			- number of values specified
				-1 -> all four sides
				-2 -> t&b, l&r
				-3 -> t , l&r, b
				-4 -> t, r, b, l (clockwise)		*************// this isn't working for (dotted, none, none, none)
				-by default it is medium
		- border-style 
			- border-(top, right, bottom, left)-style : 
			- number of values specified are same as border-width
			- none, hidden, dotted, dashed, solid, double		**** what is the difference between none and hidden
			-grooove -> it is like a deep valley around element
			- ridge -> like a wall around our element
			- inset -> it's like our image is inside(lower level) than our webpage 	
			- outset -> it's like our image is outside(higher level) than our webpage

		-border-color
			- keyword || #abcf || rgba(x, y, z, a) || rgb(x, y, z)
		- by default hr has border-style inset with a height of 1px 

	-INLINE CSS  
		- css written inside html tags using style = "css code"
		- what if I want to write it over many elements having same tags
		- After writing what if I want to change it over all elements

	- INTERNAL CSS 
		- CSS code is written inside 
			- <style>
			....
			</style>
		- classes are referred by .class {}
		- id's are reffered by #id{}
		- what if I want to make the same css changes over multiple html files in the same folder 

	- when attaching a background image -> use background-attachment : fixed(no movement of image) : none ( movement of image)

	- EXTERNAL CSS
		-creating a css file separately and specifying the elements on which we want to apply the style	
		- use link and press enter and change href = "style.css" , for specifying the stylesheet in html 		
			- also if style.css is in css folder use href = "css/style.css" and not** href = "/css.style.ss"
		- multiple html files can have same css style

	- when same html element is styled using inline, internal and external css
		- inline > internal > external
		- use chrome developer tools to see that 
		- bcoz-> if you don't want style to apply to apply to a particular page or element, then you can use this
	
	- selector {rule : value;}
		- tag selector 
			-tagname { ... : ... ;}
		- class selector 
			- .class {... : ... ;}
		- id selector	
			#id {..... : .... ;}
		- many classes , but only one id
		- class selecctor for applying same style to multiple elements
		- id selector for applying to one specific element 

	- can have multiple class for a given tag 
		- cannot have multiple id for a given tag
		- mostly try to use classes 
	
	- favicon
		- eariler days if someone bookmarked your website in internet explorer, it would give you the number of people who bookmarked
			- i.e. their favorite website marked with an icon
		- nowadays, the only use is to show on beside the title of your web page
		- create using favicon.io

	- <div> is used to group things together that needs the same styling
		- the  html <body> has default margin of 8px make it zero (margin : 0)
		- Also the <h1> tag has default margin ( margin-top: 0)
	
	- padding, border, margin
		-padding is used to increase the space between border and the content (here the background color does remains same through content and padding)
		- border is used for of course border
		- margin is the transparent space that is left in between that division and another element

	- 

https://css-tricks.com/attribute-selectors/

https://css-tricks.com/how-nth-child-works/

https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics

https://developer.mozilla.org/en-US/docs/Web/CSS

- display inline
	- span, img, a
- display block
	- <p>, <h1>, <hr>
- <span>
	- takes only the space as required by the content
	- inline so, continues on the next line
	- no effect of mentioning the widthx

- Let's say we want a number of elements spanning continously, but cannot change width
	- If I use display: block, then it goes on next line
	- How can I make the block elements sit on one line, and at the same time manipulate their width 	

- display: inline-block
	- elements are inline, but we are allowed to set the width as well 

- display : none means, not displayed, simply as if it never existed

- visibility : hidden 
	- the element is hidden, but it still occupies the space

- rules of html
	- content is everything
	- order from code
	- children on parents

- position : 
	- static; -> normal  how html elements would be placed if no css is applied
	- relative; -> relative to the static positioning of elements, how we want to push the element
		-> top: 20px (push element down from top by 20 px)	
		-> bottom, left, right 
		- pushing doesn't affect any other elements around it, it just covers the element

	- absolute -> taking reference from parent element		(parent must be set to position: relative)
		-> top 20px (place the elment in such a way, that it it is 20 px away from top of the parent element)
		-> Well, but if you do this your element's static space is completely removed
	
	- fixed -> Scrolling doesn't change the position of that element
		-> it remains intact on the screen

- text-align : center;
	- it'll center everything inside it that doesn't have a width set 
		- if the element has a width set use
		- margin:  0 auto; ( or simply auto will also work)
	- generally used in body element 

- font-family : serif , sans-serif, monospace
	- use monospace for mostly coding, where every character takes equal size 

	- font-family : montserrat, sans-serif 		( If user doesn't have montserrat go with any sans serif font that they have)
	- Other thing we can do is embed fonts from fonts.google.com

- font-size : px, em, rem

- font-weight : normal, bold, 100, 200, 300,

- line-height : spacing on top and bottom of line (usually given in just pure number)

- float-left: sends image to the left of the division, and all other things are positioned to it's right

- clear-left : clears the part from being floated by float property
****  it is advised to not really use float ( use margin and other stuff )

- use cssbuttongenerator :) for getting buttons ready lol 